"""Formatters for digest output in various formats."""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any

from ..models import NewsItem


class BaseFormatter(ABC):
    """Abstract base class for digest formatters."""

    @abstractmethod
    def format_daily_digest(
        self,
        items: list[tuple[NewsItem, float]],
        date: datetime,
        metadata: dict[str, Any] | None = None,
    ) -> str:
        """Format items into a daily digest.

        Args:
            items: List of (item, score) tuples
            date: Date of the digest
            metadata: Optional metadata

        Returns:
            Formatted digest string
        """
        pass

    @abstractmethod
    def format_weekly_summary(
        self,
        items: list[tuple[NewsItem, float]],
        week_start: datetime,
        week_end: datetime,
        top_topics: list[tuple[str, int]],
        metadata: dict[str, Any] | None = None,
    ) -> str:
        """Format items into a weekly summary.

        Args:
            items: List of (item, score) tuples
            week_start: Start date of the week
            week_end: End date of the week
            top_topics: List of (topic, count) tuples
            metadata: Optional metadata

        Returns:
            Formatted summary string
        """
        pass


class MarkdownFormatter(BaseFormatter):
    """Formats digests as Markdown."""

    def format_daily_digest(
        self,
        items: list[tuple[NewsItem, float]],
        date: datetime,
        metadata: dict[str, Any] | None = None,
    ) -> str:
        """Format daily digest as Markdown."""
        lines = []

        # Header
        lines.append(f"# Daily News Digest - {date.strftime('%Y-%m-%d')}")
        lines.append("")

        # Summary
        lines.append(f"**Total items:** {len(items)}")
        if metadata:
            if "sources" in metadata:
                lines.append(f"**Sources:** {', '.join(metadata['sources'])}")
            if "categories" in metadata:
                lines.append(f"**Categories:** {', '.join(metadata['categories'])}")
        lines.append("")
        lines.append("---")
        lines.append("")

        # Group by category if available
        if metadata and "grouped_items" in metadata:
            for category, category_items in metadata["grouped_items"].items():
                lines.append(f"## {category.title()}")
                lines.append("")

                for item, score in category_items:
                    lines.extend(self._format_item(item, score))
                    lines.append("")
        else:
            # Simple list
            for item, score in items:
                lines.extend(self._format_item(item, score))
                lines.append("")

        # Footer
        lines.append("---")
        lines.append("")
        lines.append("*Generated by AI News Agent*")

        return "\n".join(lines)

    def format_weekly_summary(
        self,
        items: list[tuple[NewsItem, float]],
        week_start: datetime,
        week_end: datetime,
        top_topics: list[tuple[str, int]],
        metadata: dict[str, Any] | None = None,
    ) -> str:
        """Format weekly summary as Markdown."""
        lines = []

        # Header
        lines.append("# Weekly News Summary")
        lines.append(
            f"**Period:** {week_start.strftime('%Y-%m-%d')} to "
            f"{week_end.strftime('%Y-%m-%d')}"
        )
        lines.append("")

        # Overview
        lines.append("## Overview")
        lines.append(f"- **Total items:** {len(items)}")
        if metadata:
            if "total_collected" in metadata:
                lines.append(
                    f"- **Total collected this week:** {metadata['total_collected']}"
                )
            if "sources_count" in metadata:
                lines.append(f"- **Active sources:** {metadata['sources_count']}")
        lines.append("")

        # Top topics
        if top_topics:
            lines.append("## Top Topics This Week")
            for topic, count in top_topics:
                lines.append(f"- **{topic}**: {count} articles")
            lines.append("")

        # AI Summary (if available)
        if metadata and "ai_summary" in metadata:
            lines.append("## AI Summary")
            lines.append(metadata["ai_summary"])
            lines.append("")

        # Top stories
        lines.append("## Top Stories")
        lines.append("")

        # Group by day if available
        if metadata and "by_day" in metadata:
            for day, day_items in metadata["by_day"].items():
                lines.append(f"### {day}")
                lines.append("")

                for item, score in day_items[:5]:  # Top 5 per day
                    lines.extend(self._format_item(item, score, compact=True))
                    lines.append("")
        else:
            # Simple list of top items
            for item, score in items[:20]:  # Top 20 overall
                lines.extend(self._format_item(item, score))
                lines.append("")

        # Footer
        lines.append("---")
        lines.append("")
        lines.append("*Generated by AI News Agent*")

        return "\n".join(lines)

    def _format_item(
        self, item: NewsItem, score: float, compact: bool = False
    ) -> list[str]:
        """Format a single news item."""
        lines = []

        # Title with link
        lines.append(f"### [{item.title}]({item.url})")

        # Metadata line
        meta_parts = [
            f"**Source:** {item.source}",
            f"**Published:** {item.published_at.strftime('%Y-%m-%d %H:%M')}",
        ]
        if item.tags:
            meta_parts.append(f"**Tags:** {', '.join(item.tags)}")
        if not compact:
            meta_parts.append(f"**Relevance:** {score:.2f}")

        lines.append(" | ".join(meta_parts))
        lines.append("")

        # Summary or content preview
        if item.summary:
            lines.append(item.summary)
        elif not compact:
            # Show first 200 chars of content
            preview = item.content[:200]
            if len(item.content) > 200:
                preview += "..."
            lines.append(preview)

        return lines


class HTMLFormatter(BaseFormatter):
    """Formats digests as HTML."""

    def format_daily_digest(
        self,
        items: list[tuple[NewsItem, float]],
        date: datetime,
        metadata: dict[str, Any] | None = None,
    ) -> str:
        """Format daily digest as HTML."""
        html_parts = []

        # Header
        html_parts.append(
            """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Daily News Digest - {date}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI',
                Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 30px;
        }}
        h3 {{
            color: #2c3e50;
            margin-top: 20px;
        }}
        .meta {{
            color: #7f8c8d;
            font-size: 0.9em;
            margin: 5px 0;
        }}
        .meta span {{
            margin-right: 15px;
        }}
        .summary {{
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }}
        .article {{
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e0e0;
        }}
        .article:last-child {{
            border-bottom: none;
        }}
        .tags {{
            margin-top: 10px;
        }}
        .tag {{
            display: inline-block;
            background-color: #3498db;
            color: white;
            padding: 3px 10px;
            border-radius: 15px;
            font-size: 0.85em;
            margin-right: 5px;
        }}
        .footer {{
            text-align: center;
            color: #7f8c8d;
            margin-top: 40px;
            font-size: 0.9em;
        }}
        a {{
            color: #3498db;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
    </style>
</head>
<body>
    <div class="container">
""".format(date=date.strftime("%Y-%m-%d"))
        )

        # Title
        html_parts.append(f"<h1>Daily News Digest - {date.strftime('%Y-%m-%d')}</h1>")

        # Summary
        html_parts.append('<div class="summary">')
        html_parts.append(f"<strong>Total items:</strong> {len(items)}<br>")
        if metadata:
            if "sources" in metadata:
                html_parts.append(
                    f"<strong>Sources:</strong> {', '.join(metadata['sources'])}<br>"
                )
            if "categories" in metadata:
                html_parts.append(
                    f"<strong>Categories:</strong> {', '.join(metadata['categories'])}"
                )
        html_parts.append("</div>")

        # Articles
        if metadata and "grouped_items" in metadata:
            for category, category_items in metadata["grouped_items"].items():
                html_parts.append(f"<h2>{category.title()}</h2>")

                for item, score in category_items:
                    html_parts.append(self._format_item_html(item, score))
        else:
            for item, score in items:
                html_parts.append(self._format_item_html(item, score))

        # Footer
        html_parts.append("""
        <div class="footer">
            <p>Generated by AI News Agent</p>
        </div>
    </div>
</body>
</html>
""")

        return "".join(html_parts)

    def format_weekly_summary(
        self,
        items: list[tuple[NewsItem, float]],
        week_start: datetime,
        week_end: datetime,
        top_topics: list[tuple[str, int]],
        metadata: dict[str, Any] | None = None,
    ) -> str:
        """Format weekly summary as HTML."""
        html_parts = []

        # Header
        html_parts.append("""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Weekly News Summary</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI',
                Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 35px;
        }}
        h3 {{
            color: #2c3e50;
            margin-top: 25px;
        }}
        .period {{
            color: #7f8c8d;
            font-size: 1.1em;
            margin-bottom: 20px;
        }}
        .overview {{
            background-color: #ecf0f1;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        .topics {{
            background-color: #e8f4f8;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        .topic-item {{
            margin: 10px 0;
            font-size: 1.1em;
        }}
        .topic-count {{
            background-color: #3498db;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.9em;
            margin-left: 10px;
        }}
        .ai-summary {{
            background-color: #f9f9f9;
            border-left: 4px solid #3498db;
            padding: 20px;
            margin: 20px 0;
            font-style: italic;
        }}
        .day-section {{
            margin-top: 30px;
        }}
        .article {{
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
        }}
        .article:last-child {{
            border-bottom: none;
        }}
        .meta {{
            color: #7f8c8d;
            font-size: 0.9em;
            margin: 5px 0;
        }}
        .footer {{
            text-align: center;
            color: #7f8c8d;
            margin-top: 50px;
            font-size: 0.9em;
        }}
        a {{
            color: #3498db;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
    </style>
</head>
<body>
    <div class="container">
""")

        # Title and period
        html_parts.append("<h1>Weekly News Summary</h1>")
        html_parts.append(
            f'<div class="period">Period: {week_start.strftime("%Y-%m-%d")} '
            f"to {week_end.strftime('%Y-%m-%d')}</div>"
        )

        # Overview
        html_parts.append("<h2>Overview</h2>")
        html_parts.append('<div class="overview">')
        html_parts.append(f"<strong>Selected stories:</strong> {len(items)}<br>")
        if metadata:
            if "total_collected" in metadata:
                html_parts.append(
                    f"<strong>Total collected:</strong> "
                    f"{metadata['total_collected']}<br>"
                )
            if "sources_count" in metadata:
                html_parts.append(
                    f"<strong>Active sources:</strong> {metadata['sources_count']}"
                )
        html_parts.append("</div>")

        # Top topics
        if top_topics:
            html_parts.append("<h2>Top Topics This Week</h2>")
            html_parts.append('<div class="topics">')
            for topic, count in top_topics:
                html_parts.append(
                    f'<div class="topic-item">{topic.title()}'
                    f'<span class="topic-count">{count}</span></div>'
                )
            html_parts.append("</div>")

        # AI Summary
        if metadata and "ai_summary" in metadata:
            html_parts.append("<h2>AI Summary</h2>")
            html_parts.append(f'<div class="ai-summary">{metadata["ai_summary"]}</div>')

        # Top stories
        html_parts.append("<h2>Top Stories</h2>")

        if metadata and "by_day" in metadata:
            for day, day_items in metadata["by_day"].items():
                html_parts.append('<div class="day-section">')
                html_parts.append(f"<h3>{day}</h3>")

                for item, score in day_items[:5]:
                    html_parts.append(self._format_item_html(item, score, compact=True))

                html_parts.append("</div>")
        else:
            for item, score in items[:20]:
                html_parts.append(self._format_item_html(item, score))

        # Footer
        html_parts.append("""
        <div class="footer">
            <p>Generated by AI News Agent</p>
        </div>
    </div>
</body>
</html>
""")

        return "".join(html_parts)

    def _format_item_html(
        self, item: NewsItem, score: float, compact: bool = False
    ) -> str:
        """Format a single news item as HTML."""
        html = ['<div class="article">']

        # Title
        html.append(f'<h3><a href="{item.url}">{item.title}</a></h3>')

        # Metadata
        html.append('<div class="meta">')
        html.append(f"<span><strong>Source:</strong> {item.source}</span>")
        html.append(
            f"<span><strong>Published:</strong> "
            f"{item.published_at.strftime('%Y-%m-%d %H:%M')}</span>"
        )
        if not compact:
            html.append(f"<span><strong>Relevance:</strong> {score:.2f}</span>")
        html.append("</div>")

        # Tags
        if item.tags:
            html.append('<div class="tags">')
            for tag in item.tags:
                html.append(f'<span class="tag">{tag}</span>')
            html.append("</div>")

        # Summary
        if item.summary and not compact:
            html.append(f"<p>{item.summary}</p>")
        elif not compact and item.content:
            preview = item.content[:200]
            if len(item.content) > 200:
                preview += "..."
            html.append(f"<p>{preview}</p>")

        html.append("</div>")

        return "".join(html)
